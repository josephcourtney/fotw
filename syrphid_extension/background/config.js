import { log } from "./logger.js";

let config = {
  LOG_LEVEL: "info",
  WS_SERVER: "ws://localhost:8080",
  MAX_RECONNECT_INTERVAL_MS: 32000,
  RECONNECT_INTERVAL_MS: 5000,
  MAX_RECONNECT_ATTEMPTS: 10,
  RECONNECT_ATTEMPTS: 0,
  EXPONENTIAL_BACKOFF_FACTOR: 2,
  TRACKED_EVENTS: [
    "DeviceMotionEvent",
    "DeviceOrientationEvent",
    "abort",
    "addtrack",
    "animationcancel",
    "animationend",
    "animationiteration",
    "animationstart",
    "audioend",
    "audioprocess",
    "audiostart",
    "beforeinput",
    "beforeunload",
    "blur",
    "boundary",
    "canplay",
    "canplaythrough",
    "change",
    "chargingchange",
    "chargingtimechange",
    "click",
    "close",
    "complete",
    "compositionend",
    "compositionstart",
    "compositionupdate",
    "contextmenu",
    "controllerchange",
    "copy",
    "cut",
    "dblclick",
    "devicemotion",
    "deviceorientation",
    "deviceorientationabsolute",
    "dischargingtimechange",
    "drag",
    "dragend",
    "dragenter",
    "dragexit",
    "dragleave",
    "dragover",
    "dragstart",
    "drop",
    "durationchange",
    "end",
    "ended",
    "error",
    "focus",
    "focusin",
    "focusout",
    "formdata",
    "fullscreenchange",
    "fullscreenerror",
    "gamepadconnected",
    "gamepaddisconnected",
    "getCurrentPosition",
    "hashchange",
    "input",
    "invalid",
    "keydown",
    "keypress",
    "keyup",
    "levelchange",
    "load",
    "loadeddata",
    "loadedmetadata",
    "loadstart",
    "mark",
    "merchantvalidation",
    // "message",
    "mousedown",
    "mouseenter",
    "mouseleave",
    "mousemove",
    "mouseout",
    "mouseover",
    "mouseup",
    "networkchange",
    "nomatch",
    "offline",
    "online",
    "open",
    "pagehide",
    "pageshow",
    "paste",
    "pause",
    "paymentmethodchange",
    "play",
    "playing",
    "popstate",
    "progress",
    "push",
    "ratechange",
    "readystatechange",
    "removetrack",
    "reset",
    "resize",
    "result",
    "scroll",
    "securitypolicyviolation",
    "seeked",
    "seeking",
    "select",
    "slotchange",
    "soundend",
    "soundprocess",
    "soundstart",
    "speechend",
    "speecherror",
    "speechstart",
    "stalled",
    "start",
    "statechange",
    "storage",
    "submit",
    "suspend",
    "sync",
    "timeupdate",
    "toggle",
    "touchcancel",
    "touchend",
    "touchmove",
    "touchstart",
    "transitioncancel",
    "transitionend",
    "transitionrun",
    "transitionstart",
    "unload",
    "visibilitychange",
    "volumechange",
    "waiting",
    "watchPosition",
    "wheel",
  ],
};

const getConfig = () => ({ ...config });

const setConfig = (newConfig) => {
  config = { ...config, ...newConfig };
};

const loadConfig = async () => {
  try {
    const storage = await browser.storage.local.get(Object.keys(config));
    Object.keys(config).forEach((key) => {
      config[key] = storage[key] || config[key];
    });
    log("Configuration loaded", "info");
  } catch (error) {
    log(`Error loading config: ${error.message}`, "error");
  }
};

export { loadConfig, getConfig, setConfig };
